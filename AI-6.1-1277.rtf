{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}{\f2\fnil\fcharset1 Cambria Math;}}
{\*\generator Riched20 10.0.19041}{\*\mmathPr\mmathFont2\mwrapIndent1440 }\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 2403A51277\par
AI ASSISTED CODING\par
Question:\par
AI-Based Code Completion \f1\endash  Classes, Loops, and Conditionals\par
Lab Objectives:\par
\bullet\tab To explore AI-powered auto-completion features for core Python constructs.\par
\bullet\tab To analyze how AI suggests logic for class definitions, loops, and conditionals.\par
\bullet\tab To evaluate the completeness and correctness of code generated by AI assistants.\par
\par
Lab Outcomes (LOs):\par
After completing this lab, students will be able to:\par
\par
\bullet\tab Use AI tools to generate and complete class definitions and methods.\par
\bullet\tab Understand and assess AI-suggested loops for iterative tasks.\par
\bullet\tab Generate conditional statements through prompt-driven suggestions.\par
\bullet\tab Critically evaluate AI-assisted code for correctness and clarity.\par
\par
Task Description #1 (Classes \endash  Employee Management)\par
\bullet\tab Task: Use AI to create an Employee class with attributes (name, id, salary) and a method to calculate yearly salary.\par
\bullet\tab Instructions:\par
o\tab Prompt AI to generate the Employee class.\par
o\tab Analyze the generated code for correctness and structure.\par
o\tab Ask AI to add a method to give a bonus and recalculate salary.\par
Expected Output #1:\par
\bullet\tab A class with constructor, display_details(), and calculate_bonus() methods.\par
\par
Task Description #2 (Loops \endash  Automorphic Numbers in a Range)\par
\bullet\tab Task: Prompt AI to generate a function that displays all Automorphic numbers between 1 and 1000 using a for loop.\par
\bullet\tab Instructions:\par
o\tab Get AI-generated code to list Automorphic numbers using a for loop.\par
o\tab Analyze the correctness and efficiency of the generated logic.\par
o\tab Ask AI to regenerate using a while loop and compare both implementations.\par
Expected Output #2:\par
\bullet\tab Correct implementation that lists Automorphic numbers using both loop types, with explanation.\par
\par
\par
\par
Task Description #3 (Conditional Statements \endash  Online Shopping Feedback Classification)\par
\bullet\tab Task: Ask AI to write nested if-elif-else conditions to classify online shopping feedback as Positive, Neutral, or Negative based on a numerical rating (1\endash 5).\par
\bullet\tab Instructions:\par
o\tab Generate initial code using nested if-elif-else.\par
o\tab Analyze correctness and readability.\par
o\tab Ask AI to rewrite using dictionary-based or match-case structure.\par
Expected Output #3:\par
\bullet\tab Feedback classification function with explanation and an alternative approach.\par
\par
Task Description #4 (Loops \endash  Prime Numbers in a Range)\par
\bullet\tab Task: Generate a function using AI that displays all prime numbers within a user-specified range (e.g., 1 to 500).\par
\bullet\tab Instructions:\par
o\tab Get AI-generated code to list all primes using a for loop.\par
o\tab Analyze the correctness and efficiency of the prime-checking logic.\par
o\tab Ask AI to regenerate an optimized version (e.g., using the square root method).\par
Expected Output #4:\par
\bullet\tab Python program that lists all prime numbers within a given range, with an optimized version and explanation.\par
\par
Task Description #5 (Classes \endash  Library System)\par
\bullet\tab Task: Use AI to build a Library class with methods to add_book(), issue_book(), and display_books().\par
\bullet\tab Instructions:\par
o\tab Generate Library class code using AI.\par
o\tab Analyze if methods handle edge cases (e.g., issuing unavailable books).\par
o\tab Ask AI to add comments and documentation.\par
Expected Output #5:\par
\bullet\tab Library class with all methods, inline comments, and explanation.\par
\par
Task 1 \endash  Classes (Employee Management)\par
Prompt :\par
"Write a Python class Employee with attributes (name, id, salary). Add methods to display details, calculate yearly salary, and give a bonus."\par
Code:\par
class Employee:\par
    def init(self, name, emp_id, salary):\par
        self.name = name\par
        self.emp_id = emp_id\par
        self.salary = salary\par
\par
    def display_details(self):\par
        print(f"Employee Name: \{self.name\}")\par
        print(f"Employee ID: \{self.emp_id\}")\par
        print(f"Monthly Salary: \{self.salary\}")\par
\par
    def yearly_salary(self):\par
        return self.salary * 12\par
\par
    def calculate_bonus(self, bonus_percent):\par
        bonus = (self.salary * bonus_percent) / 100\par
        self.salary += bonus\par
        return self.salary\par
emp = Employee("John", 101, 50000)\par
emp.display_details()\par
print("Yearly Salary:", emp.yearly_salary())\par
print("Updated Salary after 10% bonus:", emp.calculate_bonus(10))\par
output:\par
Employee Name: John\par
Employee ID: 101\par
Monthly Salary: 50000\par
Yearly Salary: 600000\par
Updated Salary after 10% bonus: 55000.0\par
\par
Task 2 \endash  Loops (Automorphic Numbers)\par
Prompt:\par
"Generate a function in Python that prints all Automorphic numbers between 1 and 1000 using a for loop."\par
Code:\par
def automorphic_for():\par
    print("Automorphic numbers between 1 and 1000 (for loop):")\par
    for num in range(1, 1001):\par
        sq = num * num\par
        if str(sq).endswith(str(num)):\par
            print(num, end=" ")\par
automorphic_for()\par
automorphic_while()\par
output:\par
Automorphic numbers between 1 and 1000 (for loop):\par
1 5 6 25 76 376 625 \par
\par
Automorphic numbers between 1 and 1000 (while loop):\par
1 5 6 25 76 376 625\par
\par
Task 3 \endash  Conditional Statements (Feedback Classification)\par
Prompt:\par
"Write a Python function that classifies online shopping feedback (1\endash 5) using nested if-elif-else: Positive, Neutral, or Negative."\par
Code:\par
def feedback_classification(rating):\par
    if rating == 5:\par
        return "Positive Feedback"\par
    elif rating == 4:\par
        return "Positive Feedback"\par
    elif rating == 3:\par
        return "Neutral Feedback"\par
    elif rating == 2:\par
        return "Negative Feedback"\par
    elif rating == 1:\par
        return "Negative Feedback"\par
    else:\par
        return "Invalid Rating"\par
print("Rating: 5 \f2\u8594?\f0 ", feedback_classification(5))\par
print("Rating: 3 \f2\u8594?\f0 ", feedback_classification(3))\par
print("Rating: 1 \f2\u8594?\f0 ", feedback_dict(1))\par
print("Rating: 7 \f2\u8594?\f0 ", feedback_dict(7))\par
output:\par
Rating: 5 \f2\u8594?\f0  Positive Feedback\par
Rating: 3 \f2\u8594?\f0  Neutral Feedback\par
Rating: 1 \f2\u8594?\f0  Negative Feedback\par
Rating: 7 \f2\u8594?\f0  Invalid Rating\par
\par
Task 4 \f1\endash  Loops (Prime Numbers)\par
Prompt:\par
"Write a Python function that prints all prime numbers between 1 and 500 using a for loop."\par
Code:\par
def primes_in_range(start, end):\par
    print(f"Prime numbers between \{start\} and \{end\}:")\par
    for num in range(start, end + 1):\par
        if num > 1:\par
            for i in range(2, num):\par
                if num % i == 0:\par
                    break\par
            else:\par
                print(num, end=" ")\par
primes_in_range(1, 50)\par
optimized_primes(1, 50)\par
output:\par
Prime numbers between 1 and 50:\par
2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 \par
\par
Optimized prime numbers between 1 and 50:\par
2 3 5 7 11 13 17 19 23 29 31 37 41 43 47\par
\par
Task 5 \endash  Classes (Library System)\par
Prompt:\par
 "Create a Python class Library with methods add_book(), issue_book(), and display_books(). Include comments and handle cases where a book is not available."\par
Code:\par
class Library:\par
    def init(self):\par
        self.books = []\par
\par
    def add_book(self, book_name):\par
        """Adds a book to the library collection"""\par
        self.books.append(book_name)\par
        print(f'"\{book_name\}" has been added to the library.')\par
\par
    def display_books(self):\par
        """Displays all books in the library"""\par
        if self.books:\par
            print("Books available in the library:")\par
            for book in self.books:\par
                print(f"- \{book\}")\par
        else:\par
            print("No books available in the library.")\par
\par
    def issue_book(self, book_name):\par
        """Issues a book if available, else shows an error"""\par
        if book_name in self.books:\par
            self.books.remove(book_name)\par
            print(f'"\{book_name\}" has been issued.')\par
        else:\par
            print(f'Sorry, "\{book_name\}" is not available.')\par
lib = Library()\par
lib.add_book("Python Programming")\par
lib.add_book("Data Science")\par
lib.display_books()\par
lib.issue_book("Python Programming")\par
lib.issue_book("Machine Learning")\par
lib.display_books()\par
output:\par
"Python Programming" has been added to the library.\par
"Data Science" has been added to the library.\par
Books available in the library:\par
- Python Programming\par
- Data Science\par
"Python Programming" has been issued.\par
Sorry, "Machine Learning" is not available.\par
Books available in the library:\par
- Data Science\f0\lang9\par
}
 